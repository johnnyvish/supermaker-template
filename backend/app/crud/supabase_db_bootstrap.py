"""Supabase database bootstrap utility.

This script helps provision data isolation for a new app generated by the LLM.

It supports two strategies:

1) schema (default):
   - Derive a sanitized schema identifier from the provided app name
   - Output the SQL to create the schema (and optionally run it if configured)

2) project (optional):
   - Use Supabase Management API to create a new Supabase project per app
   - Requires org and token; if unavailable, prints the exact API call details

Environment variables used (optional):
- SUPABASE_MANAGEMENT_TOKEN: PAT for Supabase Management API
- SUPABASE_ORG_ID: Supabase organization ID (for project creation)
- SUPABASE_DB_REGION: e.g., "us-east-1" (or provider-specific code)
- SUPABASE_DB_TIER: e.g., "free" or "payg"
- SUPABASE_DB_PASSWORD: database password for the new project
- SUPABASE_PROJECT_NAME: overrides the project/app name

Command examples:
- python -m app.crud.supabase_db_bootstrap --app-name "Acme CRM"
- python -m app.crud.supabase_db_bootstrap --app-name "Acme CRM" --mode project \
    --org-id $SUPABASE_ORG_ID --db-region us-east-1 --tier free --write-env
"""

from __future__ import annotations

import argparse
import os
import re
import secrets
import string
from dataclasses import dataclass
from typing import Optional, Dict

import requests


SCHEMA_MODE = "schema"
PROJECT_MODE = "project"


def derive_db_identifier(app_name: str) -> str:
    """Derive a safe Postgres identifier from an arbitrary app name.

    - Lowercase
    - Replace non-alphanumeric with underscores
    - Collapse consecutive underscores
    - Ensure starts with a letter; if not, prefix with "app_"
    - Trim to a reasonable length (63 chars is the PG identifier limit)
    """
    base = app_name.strip().lower()
    base = re.sub(r"[^a-z0-9]+", "_", base)
    base = re.sub(r"_+", "_", base).strip("_")
    if not base or not base[0].isalpha():
        base = f"app_{base}" if base else "app"
    return base[:63]


def generate_schema_sql(schema: str) -> str:
    """Return SQL to create a schema if it doesn't already exist."""
    return f"CREATE SCHEMA IF NOT EXISTS \"{schema}\";"


def generate_password(length: int = 32) -> str:
    """Generate a strong random password."""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
    return "".join(secrets.choice(alphabet) for _ in range(length))


@dataclass
class ProjectCreateConfig:
    token: str
    org_id: str
    name: str
    db_region: str
    db_tier: str
    db_password: str


def create_supabase_project(cfg: ProjectCreateConfig) -> dict:
    """Call Supabase Management API to create a new project.

    Note: This requires appropriate billing/permissions and may incur costs.
    """
    url = "https://api.supabase.com/v1/projects"
    headers = {
        "Authorization": f"Bearer {cfg.token}",
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    # Align with current Supabase Management API fields
    # See error hint: expects 'db_pass' and does not recognize legacy keys
    payload = {
        "organization_id": cfg.org_id,
        "name": cfg.name,
        "region": cfg.db_region,
        "plan": cfg.db_tier,
        "db_pass": cfg.db_password,
    }

    resp = requests.post(url, json=payload, headers=headers, timeout=60)
    if resp.status_code >= 400:
        raise RuntimeError(
            f"Supabase project creation failed: {resp.status_code} {resp.text}"
        )
    return resp.json()


def main() -> None:
    parser = argparse.ArgumentParser(description="Supabase database bootstrap")
    parser.add_argument(
        "--app-name",
        required=True,
        help="Human-facing app name used to derive identifiers (e.g., 'Acme CRM')",
    )
    parser.add_argument(
        "--mode",
        choices=[SCHEMA_MODE, PROJECT_MODE],
        default=SCHEMA_MODE,
        help="Strategy: 'schema' (default) creates a schema; 'project' creates a new Supabase project",
    )
    parser.add_argument("--org-id", default=os.getenv("SUPABASE_ORG_ID"))
    parser.add_argument("--db-region", default=os.getenv("SUPABASE_DB_REGION", "us-east-1"))
    parser.add_argument("--tier", default=os.getenv("SUPABASE_DB_TIER", "free"))
    parser.add_argument("--project-name", default=os.getenv("SUPABASE_PROJECT_NAME"))
    parser.add_argument("--db-password", default=os.getenv("SUPABASE_DB_PASSWORD"))
    # Optional: persist created project details to an env file
    default_env_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "supabase.env"))
    parser.add_argument("--write-env", action="store_true", help="Write project credentials into the env file")
    parser.add_argument("--env-file", default=default_env_path, help="Path to env file to write (default: backend/supabase.env)")
    args = parser.parse_args()

    app_name = args.app_name
    project_name = args.project_name or app_name
    schema = derive_db_identifier(app_name)

    if args.mode == SCHEMA_MODE:
        sql = generate_schema_sql(schema)
        print("Derived schema:", schema)
        print("\n-- Execute the following SQL against your Supabase Postgres instance:")
        print(sql)
        print(
            "\nTip: You can run this via the Supabase SQL Editor, or management SQL API,"
            " or psql connected to your project's database."
        )
        return

    # PROJECT mode
    token = os.getenv("SUPABASE_MANAGEMENT_TOKEN")
    org_id = args.org_id
    db_region = args.db_region
    db_tier = args.tier
    db_password = args.db_password or generate_password()

    missing = []
    if not token:
        missing.append("SUPABASE_MANAGEMENT_TOKEN")
    if not org_id:
        missing.append("SUPABASE_ORG_ID or --org-id")

    if missing:
        print("Missing configuration to call Supabase Management API:", ", ".join(missing))
        print("\nTo create a project manually via API, POST to https://api.supabase.com/v1/projects")
        print("Headers: Authorization: Bearer <SUPABASE_MANAGEMENT_TOKEN>, Content-Type: application/json")
        print("Body example:")
        example = {
            "organization_id": org_id or "<YOUR_ORG_ID>",
            "name": project_name,
            "db_region": db_region,
            "db_pricing_tier": db_tier,
            "db_password": "<STRONG_PASSWORD>",
        }
        print(example)
        return

    cfg = ProjectCreateConfig(
        token=token,
        org_id=org_id,
        name=project_name,
        db_region=db_region,
        db_tier=db_tier,
        db_password=db_password,
    )

    print(f"Creating Supabase project '{project_name}' in {db_region} (tier: {db_tier})...")
    project = create_supabase_project(cfg)
    print("Project created:", project)

    # Optionally write credentials to env file
    if args.write_env:
        try:
            env_path = os.path.abspath(args.env_file)

            def parse_env_file(path: str) -> Dict[str, str]:
                values: Dict[str, str] = {}
                if not os.path.exists(path):
                    return values
                with open(path, "r", encoding="utf-8") as f:
                    for line in f.readlines():
                        stripped = line.strip()
                        if not stripped or stripped.startswith("#"):
                            continue
                        if "=" not in stripped:
                            continue
                        k, v = stripped.split("=", 1)
                        k = k.strip()
                        v = v.strip().strip('"').strip("'")
                        if k:
                            values[k] = v
                return values

            def write_env_file(path: str, data: Dict[str, str]) -> None:
                lines = [f"{k}={v}\n" for k, v in data.items()]
                with open(path, "w", encoding="utf-8") as f:
                    f.writelines(lines)

            current = parse_env_file(env_path)
            # Update only select keys
            current["SUPABASE_PROJECT_ID"] = str(project.get("id", ""))
            current["SUPABASE_PROJECT_NAME"] = project_name
            if db_password:
                current["SUPABASE_DB_PASSWORD"] = db_password

            write_env_file(env_path, current)
            print(f"\nWrote project credentials to: {env_path}")
            print("Note: Treat this file as secret; do not commit to VCS.")
        except Exception as e:
            print(f"\nWarning: Failed to write env file: {e}")

    print("\nStore these values securely (env/secret manager) and proceed with migrations.")


if __name__ == "__main__":
    main()


